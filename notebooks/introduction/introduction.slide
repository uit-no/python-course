Introduction to Python
6 Apr 2016

Giacomo Tartari
Engineer/PhD student, UiT
giacomo.tartari@uit.no


* Python


* Brief History

- In February 1991, Guido Van Rossum published the code (version 0.9.0)

- Python 1.0 - January 1994

- Python 2.0 - October 16, 2000

- Python 3.0 - December 3, 2008

- Python 3.5 - September 13, 2015



* Python 2 or 3?

The older the better?

.image vintage-car.jpeg 400 _



* Which Version?

Not so much! 

.image old-car.jpeg 400 _




* Features

- interpreted

- multi-paradigm: object-oriented, imperative, functional, procedural, reflective

- dynamic and strongly typed (duck)

- garbage collected

- semantic indentation



* Hello World


.play hello.py 3


* Just code it!

Open your favourite editor 

Type:

	print("Hello, World!")

Save as hello.py

On the terminal type:

	python3 hello.py


* Execution 

	python3 script.py

Or add *#!/usr/bin/env*python3* as first line
	

	chmod +x script.py

	./script.py




* The interpreter

When you run python code

you run a program that

reads your script (text and human readable)

and executes it on the computer.


* Interactive shell (REPL)


_Read_Evaluate_Print_Loop_

Open your terminal and type python3


Now type some python statements


Exit with CTRL+D







* pydoc and help()



The built-in function help() invokes the online help system
Which uses pydoc to generate its documentation as text on the console


	$ pydoc os
	Help on module os:
	
	NAME
	    os - OS routines for NT or Posix depending on what system we're on.
	
	FILE
	    /usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py
	
	MODULE DOCS
	    http://docs.python.org/library/os
	
	DESCRIPTION
	    This exports:
	      - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
	      - os.path is one of the modules posixpath, or ntpath
	      - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
	      - os.curdir is a string representing the current directory ('.' or ':')
	      - os.pardir is a string representing the parent directory ('..' or '::')
		  ...





* pydoc and help()

	$ pydoc math.cos
	Help on built-in function cos in math:
	
	math.cos = cos(...)
	    cos(x)
	
	    Return the cosine of x (measured in radians).
         

	$ pydoc len
	Help on built-in function len in module builtins:
	
	len(obj, /)
	    Return the number of items in a container.






* Built in Types

- int, float, boolean etc...
- string
- list
- dictionary
- sets
- tuples


* Operators

	+ Addition	
	- Subtraction	
	* Multiplication
	/ Division
	% Modulus
	** Exponent	

	and  And
	or  Or
	
	==	Equality	
	!=	Inequality
	>	Greater then
	<	Lesser then
	>=	Greater or equal
	<=  Lesser or equal

	+=  Increment
	-=  Decrement
	etc...

* Variables

Declaring a variable is easy in python

.play vars.py 3,$


* More Variables

Python is a dynamically typed language

.play vars2.py 2,$



Try the type() built in function on your terminal



* Strings and Lists

Strings

.play seq.py 2,$

Lists

.play seq2.py 2,$




* More strings

Strings can be defined in different ways

.play strings1.py 2,$



* String functionalities

String objects are packed with useful functionalities


.play strings2.py 2,$





* Slicing

.play seq3.py 2,$





* Concatenation

	text = "Interesting text!"
	
	lst = ["Vienna", "London", "Paris", "Berlin", "Zurich", "Hamburg"]

String
.play seq4.py 7

Lists
.play seq5.py 7,$




* Dictionaries

.play dict1.py 2,$


* Insert and remove


.play dict2.py 2,$



* Sets

.play set1.py 2,$




* Tuples

Tuples are immutable lists

.play tuple1.py 2,$




* Is present?

There is an easy way to check is an element is present


.play present.py 2,$



* Conditional Statements

if _this_ then _that_

If checks on some boolean conditions, e.g.:
- is this number greater than 10?
- is this file present in the working directory?
- is this item in the list?

While _this_ and _that_ are block of code



* If


.play if1.py 2,$


* Code Blocks

.play if2.py 2,$

* More conditions

.play if3.py 2,$




* Loops

Loops are used to do _something_ a number of times

Or until a condition is satisfied 

The number or the condition doesn't have to be known when you write the code 


There are typically two kind of loops:

- for 
- while


* While

While loops a block of code _while_ a condition is satisfied


.play while.py 2,$



* For

For loops look like this:


	 for <variable> in <sequence>:
	 	<statements>

.play for1.py 2,$


* Continue and Break

Loops iterations can be skipped with _continue_

Or loops can be interrupted with _break_

.play for2.py 2,$




* Continue and Break 


.play for3.py 2,$





* Functions

Not really mathematical functions but close enough

	def function-name(Parameter list):
	    statements, i.e. the function body


                       

	def do_something(todo_list):
		for thing in todo_list:
			print(thing)



	result = do_something(my_list)
	





* Functions


.play func1.py 2,$




* Import and modules

How do I reuse useful code?

You put it into a module and then import it?


.play import1.py 2,$

And the batteries are included 

.play import2.py 2,$



* Operation on files

Common use case:
- open a file 
- read the content
- _do_something_useful_â„¢_
- write the result 
- or print it to stdout


Example: opena file and print all the words longer than _x_




* Operation on files

.play import3.py





* Operation on files

.play import4.py





## Don't Write Java in Python

This looks like Python:

```python
def do_this(and_this):
    return and_this
```

while this doesn't:

```python
def DontDoThis(orThis)
    return len(orThis)
```

`CamelCase` is only for classes:

```python
class DogFood:
    ...
```

Same goes for file names:

```
this_is_good.py
ThisLooksLikeJava.py
```

---

# Organizing Code

Keeping your code:

* readable
* correct
* robust
* maintainable

Most of this talk this applies to any language.


---


---

## Readable Code

Follow PEP-8.

(The line length limit is controversial.)

---


## Naming Conventions

```python
AnimalFile        # Class names are camel case.
animal_lengths    # Variables are lowercase with underscores.
animal_lengths()  # So are functions.
BAD_ANIMALS       # Contants are uppercase.
```

This makes them easy to tell apart.


---


## Contruct Your Program From Parts

* functions, modules, packages
* dictionaries, lists, sets
* well defined API's between parts

![Tree](graphs/tree.svg)


---

## Contain the Mess

Some parts of your code are always going to be messy.

Quarantine the mess:

* put it in a function or module
* make a well defined API for it

The rest of your code will now be cleaner.


---

## State is Evil

* use pure functions when possible
* a pure function doesn't modify anything outside itself
* keep I/O near `main()`


---


## Don't Repeat Yourself (DRY)

* don't copy and paste code
* when you see repetition, it might be time for a function

(Todo: Add example.)


---


## But Don't Contort Yourself

To avoid this repetition:

```python
MODE_NUMS = {
    'stopped': 0,
    'playing': 1,
    'recording': 3,
}
MODE_NAMES = {
    0: 'stopped',
    1: 'playing',
    3: 'recording',
}
```

you could add code that adds the flipped values:

```python
MODES = {
    'stopped': 0,
    'playing': 1,
    'recording': 3,
}
# Add reverse lookup.
MODE_NAMES = {value: name for name, value in MODES.items()}
```

but it's not worth it for such a small table and it makes the code harder to understand.


---

## Don't Copy and Paste Code

Instead of:

```python
def make_employee_card(employee):
    card = {
        'first_name': employee['first_name'],
        'last_name': employee['last_name'],
        'type': 'employee',
    }

def make_student_card(student):

```

do:

https://en.wikipedia.org/wiki/Copy_and_paste_programming


---

## Break it Into Functions

* if a functions gets to long
* if a function does more than one thing

When you find yourself commenting blocks of code:

```python
def (name):

```

it's time for a function:




---

## Use Dictionaries Instead of Ifs

Instead of:

```python
def get_mode_name(mode):
    if mode == 0:
        return 'stopped'
    elif mode == 1:
        return 'playing'
    elif mode == 3':
        return 'recording':
    else:
        raise ValueError('Unknown mode {}'.format(mode))

>>> get_mode_name(1)
playing
```

do:

```python
MODES = {
    0: 'mode',
    1: 'playing',
    3: 'recording',
}

>>> MODES[1]
playing
```


---

## Spagetti Code

![Test](images/spaghetti.svg)


---

## Readability

You spend a lot more time reading code than writing it. Spend some time making your code readable and you'll save lots of time and frustration later.

* use good names
* use [PEP-8](https://www.python.org/dev/peps/pep-0008/) as a guideline
* add whitespace to break things up

Readability leads to understanding, understanding leads to reliable programs.


---

## Modules

You've already written a module!

A module is a Python file.
A package is a directory of modules.
A module contains functions.

A module is a namespace.


---

## Functions are Verbs

Use verbs as function names:

```python
person = get_person(db, username)
```

```python
if is_student(person):
    # Do student specific thing.
```



---
## Naming Conventions

`_something_internal`.

* internal to module (or object)
* not enforced, but is a clue that it's not a part of the API


---

## ``__init__.py``

* is the top level module
* should only contain imports (no code or data)

Example:

```python
from .messages import Message
from .midifile import MidiFile, MidiTrack
from .parser import Parser, parse, parse_all
```


## Further Reading

* [Idiomatic Python (Jeff Knupp)](https://jeffknupp.com/writing-idiomatic-python-ebook/)

Review control structures?

"if x then y else"?

exceptions?

Define iteration.

"You can iterate over anything"?

filter() vs. list comprehension with `if`.


# List comprehension
# Dictionary comprehension
# Set comprehension
# Function passing
# map()
# filter()
# Generators
# Generator comprehension


Generators are useful for:

* iterating over large data sets
* iterating over infinite sequences (incoming messages, keyboard events)
* simplifying loops
* making part of a loop reusable



examples and exercies:

animals
animals without and
short words (<= 3)


for line in file:
    



for key, value in {'horses': 2, 'ducks': 3}.items():
    print('There are {} {}.'.format(value, key))




Show how you can cut and paste examples into a terminal.


* enumerate()


with animals as
for lineno, line in enumerate(file, start=1):
    print(lineno, line, end='')


def genlines():
    yield line
    yield line


for line in genlines():
    print(line)


# Instead of print.
# 
# Makes it more general.


def gen_lines():
    yield 'Line 1'
    yield 'Line 2'


def print_lines(lines):
    for line in lines:
        print(lines)


print_lines(gen_lines())


sorted()




---

## Higher Order Functions

* functions taking functions as arguments
* functions returning functions
* generally passing functions around

---

## Passing A Function to a Function

---

## Returning A Function from a Function

---

## Decorators

---

## Functional Style

``map()``, ``filter()``, ``reduce()`` and ``partial()``

```python
def reverse(word):
    return word[::-1]

list(map(reverse, ['A', 'few', 'words']))
```

```python
def is_short(word):
    return len(word) < 3

for word in filter(is_short, ['A', 'few', 'words']):
    print(word)
```

---

## How Functional Is Python?

Python has:

* first class functions
* ``map()``, ``filter()``, ``reduce()`` and ``functools``
* closures (``nonlocal``)
* decorators

but lacks:

* tail recursion
* function composition
* full support for anonymous functions (but has named inner functions)

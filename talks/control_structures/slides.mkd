## Control Structures in Python

Beyond ifs and buts.

Ole Martin Bjørndalen


---

## Iteration

```python
i = 1
while i < 4:
   print(i)
   i += 1
```

is better written as:

```python
for i in range(1, 4):
    print(i)
```

Both output:

```
1
2
3
```


## More Iteration

You can iterate over any collection:

```python
for word in ['horse', 'duck', 'rabbit']:
    print(word)

for key, value in {'horses': 2, 'ducks': 3}.items():
    print('There are {} {}.'.format(value, key))
```



## A Simple Generator

```python
def numbers():
    yield 1
    yield 2

for n in numbers():
    print(n)
```

```
1
2
```


---


## A More Typical Generator

```python
def even_numbers():
    for n in range(10):
        if n % 2 == 0:
           yield n

for n in even_numbers():
    print(n)
```

```
0
2
4
6
8
```


## What's Going On Here?

```python
def even_numbers():
    for n in range(3):
        print('(In generator)')
        yield n

for n in even_numbers():
    print('(In main lopp)')
    print(n)
```

```
(In generator)
(In main lopp)
0
(In generator)
(In main lopp)
1
(In generator)
(In main lopp)
2
```

Control switches back and forth.


---


## Converting to a List

```python
def numbers():
    yield 1
    yield 2
    yield 3

gen = numbers()
print(gen)
print(next(gen))
print(list(gen))
print(list(gen))
```

```
<generator object numbers at 0x7fe655d25888>
1
[2, 3]
[]
```


---


## Filtering With Generators

```python
def is_animal(word):
    return word != 'and'

def only_animals(words):
    for word in words:
        if is_animal(word):
           yield word

for animal in only_animals(['horse', 'cow', 'and', 'chicken']):
    print(animal)
```

```
horse
cow
chicken
```


---

## ``map()``

```
def yell(word):
    return word.upper() + '!'

map(yell, ')
``` 


## ``filter()``

```python
def is_animal(word):
    return word != 'and'

animals = filter(is_animal, ['horse', 'cow', 'and', 'chicken'])
print(animals)
print(list(animals))
```

```
['horse', 'cow', 'chicken']
```


---


## Filtering With Generators

```python
def iter_words(lines):
    for line in lines:
        for word in line.split():
            yield word

some_lines = ['one horse', 'and two chickens']
for word in iter_words(some_lines):
    print(word)
```

```
one
horse
and
two
chickens
```













---

## Iterables

An iterable is anything that can be iterated over. This includes
Python collections:

```python
# List
for city in ['Tromsø', 'Bergen', 'Sarpsborg']:
    print(city)
```

```python

```

and also objects that implement ``__iter__()``:

```python
for msg in port:
    print(msg)
```

as well as generators, which we will come back to later.

---

## Generators

You'll find this a lot in Python:

```python
for row in db_cursor:

for msg in port:

for item in list:

for key in dictionary:
```

---

## Generators

Let's say you want to loop over lines:

```python
with open('animals.txt') as file:
    lines = file.readlines()
    for line in lines:
        if 'horse' in line:
            print(line.rstrip())
```

```
horse
horse and badger
```

But this:

* reads everything into memory at once
* doesn't start iterating over lines until they're all read

What if you have 7 fantasillion lines?

---

## Generators to the Rescue

The file object is a generator. Iterating over it will yield line at a time:

```python
with open('animals.txt') as file:
    for line in file:
        if 'horse' in line:
            print(line, end='')
```

```
horse and badger
horse
```

---

## A Simple Generator


```python
def numbers():
    yield 1
    for n in [2, 3]:
        yield n
    yield from [4, 5, 6]

for n in numbers():
    print(n)
```

```python
list(numbers())
```

---

## Reimplementing the Line Generator

```python
def iter_lines(file):
    while True:
         line = file.readline()
         if line = '':
             # End of file.
             return
         else:
             yield line

with open('animals.txt') as file:
    for line in iter_lines(file):
        if 'horse' in line:
            print(line, end='')

horse and badger
horse
```

Control switches in and out of the generator at ``yield``.

# You can loop over lines in a file:

```python
for line in open('files/movie_quotes.txt'):
    print(line)
```

---

Generators allow you to iterate over infinite sequences.

```python
## Todo: find a good example.
## (A loop with input() doesn't work well with Jupyter.)

def user_input():
    yield from ['These', 'are', 'lines']

for line in iter_input():
    print(line, 'backwards is', line[::-1])
    print()

print('*quit*')
```

```python
def integers():
    yield from [1, 2, 3]

for n in integers():
    print(n)
```

```python
## Todo: converting to lists
##    lines = list(gen)
##    iter(something)
```

---

## List Comprehensions

A more convenient way to write loops

```python
lines = []
for line in open('files/movie_quotes.txt'):
    lines.append(line.strip().upper())

print(lines)
```

```python
## With a list comprehension:
lines = [line.strip().upper() for line in open('files/movie_quotes.txt')]

print(lines)
```

---

## Generator Comprehensions

Convenient way to write a generator.

```python
def print_lines(lines):
    for line in lines:
        print(line)

file = open('files/movie_quotes.txt')
gen = (line.strip() for line in file)
print_lines(gen)
print_lines(['Extra line 1', 'Extra line 2'])
```

---

## Dictionary Comprehensions

```python
words = ['the', 'quick', 'brown', 'python']
counts = {word: len(word) for word in words}
print(counts)
```

---

## Higher Order Functions

* functions taking functions as arguments
* functions returning functions
* generally passing functions around

---

## Passing A Function to a Function

---

## Returning A Function from a Function

---

## Decorators

---

## Functional Style

``map()``, ``filter()``, ``reduce()`` and ``partial()``

```python
def reverse(word):
    return word[::-1]

list(map(reverse, ['A', 'few', 'words']))
```

```python
def is_short(word):
    return len(word) < 3

for word in filter(is_short, ['A', 'few', 'words']):
    print(word)
```

---

## How Functional Is Python?

Python has:

* first class functions
* ``map()``, ``filter()``, ``reduce()`` and ``functools``
* closures (``nonlocal``)
* decorators

but lacks:

* tail recursion
* function composition
* full support for anonymous functions (but has named inner functions)

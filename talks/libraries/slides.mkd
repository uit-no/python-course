## Libraries: Command Lines, HTTP Requests and Databases

* Click (http://click.pocoo.org/)
* Requests (http://docs.python-requests.org/
* Python Database API (https://www.python.org/dev/peps/pep-0249/)


---
## Command Line Arguments

What we want:

```
$ python greet.py Jane
Hello, Jane!
```

```
$ python greet.py --reverse Jane
Hello, enaJ!
```


---
## Why Use a Library for This?

Let's try without a library:

```python
import sys

# sys.argv is a list of arguments to our program.                               
# sys.argv[1] is the name of the program, so we need sys.argv[1]                
name = sys.argv[1]
print('Hello, {}!'.format(name))
```

```
$ python greet.py Jane
Hello, Jane!
```

It works? But how about `--reverse`?


---
## Let's Still Not Use a Library

```python
import sys

opts = {'reverse': False}
args = []

for arg in sys.argv[1]:
    if arg.startswith('-'):
        if arg == '--reverse':
            opts['reverse'] = True
        else:
            print('Unknown option {!r}'.format(arg), file=sys.stderr)
    else:

        uhm...
```

Eh, I give up. Let's just use a library already.


---
## Let's Use Click

`greet.py`:

```python
import click

@click.command()
@click.argument('name')
def main(name):
    print('Hello, {}!'.format(name))

main()
```

```bash
$ python greet.py Jane
Hello, Jane!
```

```bash
$ python greet.py --reverse Jane
Error: no such option: --reverse
```


---
## Adding an Option

```python
import click

@click.command()
@click.argument('name')
@click.option('--reverse', is_flag=True, help='Reverse name.')
def main(name, reverse):
    if reverse:
        name = name[::-1]
    print('Hello, {}!'.format(name))

main()
```

```bash
$ python greet.py --help
Usage: greet.py [OPTIONS] NAME

Options:
  --reverse  Reverse name.
  --help     Show this message and exit.
```

```bash
$ python greet.py --reverse Jane
Hello, enaJ!
```


---
## Requests: HTTP for Humans

```python
import requests

response = requests.get('http://google.com/')

print(response.ok)
print(response.text[:60])
```

```python
True
<!doctype html><html itemscope="" itemtype="http://schema.or
```


---
## Basic Functionality

```python
requests.get(url)
```

```python
requests.get(url, params={'country': 'Norway'})  # ?country=Norway
```

```python
requests.get(url, auth=('bob', 'secret'))
```

```python
requests.post(url, data={'some': 'thing'})
```


---
## Web Services

Example: Star Wars API: https://swapi.co/

```python
from pprint import pprint

response = requests.get('https://swapi.co/api/people/1')
luke = response.json()
pprint(luke)
```

```
{'birth_year': '19BBY',
 'name': 'Luke Skywalker',
 'eye_color': 'blue',
 'films': ['http://swapi.co/api/films/6/',
           'http://swapi.co/api/films/3/',
           'http://swapi.co/api/films/2/',
           'http://swapi.co/api/films/1/',
           'http://swapi.co/api/films/7/'],
 'gender': 'male',
 'hair_color': 'blond',

 ...
```


---
## Databases

Python Database API (https://www.python.org/dev/peps/pep-0249/)

Same API for all database (SQLite, MySQL, PostgreSQL, Oracle etc.)


---
## Example: SQLite

https://www.sqlite.org/

* comes with Python
* no server, data is stored in a local file
* great for prototyping and application data files (https://www.sqlite.org/whentouse.html)

```python
import sqlite3

conn = sqlite3.connect('movies.db')
cursor = conn.cursor()

cursor.execute('select * from movies')
for row in cursor:
    print(row)
```


---
## Connection Parameters

Databases differ here.

PostgreSQL:

```python
import psycopg2
conn = psycopg2.connect('dbname=movies user=jane')
```

MySQL

```python
import MySQLdb
conn = MySQLdb.connect(db='movies', host='localhost')
```


---
## Query Arguments

Databases differ here as well.

SQLite:

```python
cursor.execute('select * from movies where title=?', ['Minions'])
```

MySQL:

```python
cursor.execute('select * from movies where title=%s', ['Minions'])
```


---
## Thanks!
